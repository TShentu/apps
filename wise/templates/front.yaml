apiVersion: v1
data:
  nginx.conf: |
      upstream KnowledgeServer {
        server rss-svc:3010;
      }

      upstream RSSServer {
          server rss-server:3010;
      }

      upstream ArgoworkflowsSever {
          server argoworkflows-svc:2746;
      }

      server {
        listen 80;


        # Gzip Settings
        gzip off;
        gzip_disable "msie6";
        gzip_min_length 1k;
        gzip_buffers 16 64k;
        gzip_http_version 1.1;
        gzip_comp_level 6;
        gzip_types *;
        root /www/wise;

        # normal routes
        # serve given url and default to index.html if not found
        # e.g. /, /user and /foo/bar will return index.html
        location / {
          try_files $uri $uri/index.html /index.html;
          add_header Cache-Control "private,no-cache";
          add_header Last-Modified "Oct, 03 Jan 2022 13:46:41 GMT";
          expires 0;
        }

        location /ws {
          proxy_pass http://rss-svc:40010;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
          proxy_set_header Host $host;
        }


          location /knowledge {
            proxy_pass http://KnowledgeServer;

            add_header Access-Control-Allow-Headers "access-control-allow-headers,access-control-allow-methods,access-control-allow-origin,content-type,x-auth,x-unauth-error,x-authorization";
            proxy_set_header            Host $host;
            proxy_set_header            X-real-ip $remote_addr;
            proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;

          add_header X-Frame-Options SAMEORIGIN;

        }

          location /rss {
            proxy_pass http://RSSServer;

            add_header Access-Control-Allow-Headers "access-control-allow-headers,access-control-allow-methods,access-control-allow-origin,content-type,x-auth,x-unauth-error,x-authorization";
            proxy_set_header            Host $host;
            proxy_set_header            X-real-ip $remote_addr;
            proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;

            add_header X-Frame-Options SAMEORIGIN;
          }

          location /api/v1 {
            proxy_pass http://ArgoworkflowsSever;
          }

          location /artifact-files {
              proxy_pass http://ArgoworkflowsSever;
          }

          location ~ ^/download/preview/(.*)$
          {
            alias /data/Home/$1;
          }

          location /videos/ {
              if ($request_method = 'OPTIONS') {
                  add_header Access-Control-Allow-Headers "access-control-allow-headers,access-control-allow-methods,access-control-allow-origin,content-type,x-auth,x-unauth-error,x-authorization";
                  add_header Access-Control-Allow-Methods "PUT, GET, DELETE, POST, OPTIONS";
                  add_header Access-Control-Allow-Origin $http_origin;
                  add_header Access-Control-Allow-Credentials true;

                  add_header 'Access-Control-Max-Age' 1728000;
                  add_header 'Content-Type' 'text/plain; charset=utf-8';
                  add_header 'Content-Length' 0;
                  return 204;
              }
              add_header Access-Control-Allow-Headers "access-control-allow-headers,access-control-allow-methods,access-control-allow-origin,content-type,x-auth,x-unauth-error,x-authorization";
              add_header Access-Control-Allow-Methods "PUT, GET, DELETE, POST, OPTIONS";
              add_header Access-Control-Allow-Origin $http_origin;
              proxy_pass http://media-server-service.os-system:9090;
          }

          location /api {
              proxy_pass http://files-service.os-system:80;
              # rewrite ^/server(.*)$ $1 break;

              # Add original-request-related headers
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Host $host;

              add_header Accept-Ranges bytes;

              client_body_timeout 600s;
              client_max_body_size 4000M;
              proxy_request_buffering off;
              keepalive_timeout 750s;
              proxy_read_timeout 600s;
              proxy_send_timeout 600s;
          }

          location /upload {
              proxy_pass http://files-service.os-system:80;
              # rewrite ^/server(.*)$ $1 break;

              # Add original-request-related headers
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Host $host;

              add_header Accept-Ranges bytes;

              client_body_timeout 600s;
              client_max_body_size 4000M;
              proxy_request_buffering off;
              keepalive_timeout 750s;
              proxy_read_timeout 600s;
              proxy_send_timeout 600s;
          }

          # # files
          # # for all routes matching a dot, check for files and return 404 if not found
          # # e.g. /file.js returns a 404 if not found
          location ~.*\.(js|css|png|jpg|svg|woff|woff2)$
          {
              add_header Cache-Control "public, max-age=2678400";
          }
      }

kind: ConfigMap
metadata:
  name: nginx-config
  namespace: {{ .Release.Namespace }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wise
  namespace: {{ .Release.Namespace }}
  labels:
    app: wise
    applications.app.bytetrade.io/name: wise
    applications.app.bytetrade.io/owner: '{{ .Values.bfl.username }}'
    applications.app.bytetrade.io/author: bytetrade.io
  annotations:
    applications.app.bytetrade.io/icon: https://file.bttcdn.com/appstore/rss/icon.png
    applications.app.bytetrade.io/title: Wise
    applications.app.bytetrade.io/version: '0.0.1'
    applications.app.bytetrade.io/entrances: '[{"name":"wise", "host":"wise-svc", "port":80,"title":"Wise"}]'
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: wise
  template:
    metadata:
      labels:
        app: wise
    spec:
      initContainers:
      - name: terminus-sidecar-init
        image: openservicemesh/init:v1.2.3
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
          capabilities: 
            add:
            - NET_ADMIN
          runAsNonRoot: false
          runAsUser: 0
        command:
        - /bin/sh
        - -c
        - |
          iptables-restore --noflush <<EOF
          # sidecar interception rules
          *nat
          :PROXY_IN_REDIRECT - [0:0]
          :PROXY_INBOUND - [0:0]
          -A PROXY_IN_REDIRECT -p tcp -j REDIRECT --to-port 15003
          -A PROXY_INBOUND -p tcp --dport 15000 -j RETURN
          -A PROXY_INBOUND -p tcp -j PROXY_IN_REDIRECT
          -A PREROUTING -p tcp -j PROXY_INBOUND
          COMMIT
          EOF
        
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP

      containers:
      - name: frontend
        image: qq815776412/wise:v1.3.103-alpha.1
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: download-dir
            mountPath: /data/Home
          - name: nginx-config
            mountPath: /etc/nginx/nginx.conf
            subPath: nginx.conf
        ports:
        - containerPort: 80
        

      - name: terminus-envoy-sidecar
        image: bytetrade/envoy:v1.25.11
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: 1000
        ports:
        - name: proxy-admin
          containerPort: 15000
        - name: proxy-inbound
          containerPort: 15003
        volumeMounts:
        - name: terminus-sidecar-config
          readOnly: true
          mountPath: /etc/envoy/envoy.yaml
          subPath: envoy.yaml
        command:
        - /usr/local/bin/envoy
        - --log-level
        - debug
        - -c
        - /etc/envoy/envoy.yaml
        env:
        - name: POD_UID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP

      volumes:
      - name: download-dir
        hostPath:
          path: {{ .Values.userspace.userData }}
          type: Directory
      - name: terminus-sidecar-config
        configMap:
          name: sidecar-configs
          items:
          - key: envoy.yaml
            path: envoy.yaml
      - name: nginx-config
        configMap:
          name: nginx-config
          items:
          - key: nginx.conf
            path: nginx.conf


---
apiVersion: v1
data:
  envoy.yaml: |
    admin:
      access_log_path: "/dev/stdout"
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 15000
    static_resources:
      listeners:
      - name: listener_0
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 15003
        listener_filters:
          - name: envoy.filters.listener.original_dst
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.listener.original_dst.v3.OriginalDst
        filter_chains:
          - filters:
              - name: envoy.filters.network.http_connection_manager
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                  stat_prefix: desktop_http
                  upgrade_configs:
                  - upgrade_type: websocket      
                  - upgrade_type: tailscale-control-protocol            
                  skip_xff_append: false
                  max_request_headers_kb: 500
                  codec_type: AUTO
                  route_config:
                    name: local_route
                    virtual_hosts:
                      - name: service
                        domains: ["*"]
                        routes:
                          - match:
                              prefix: "/"
                            route:
                              cluster: original_dst
                              timeout: 180s
                  http_protocol_options:
                    accept_http_10: true
                  http_filters:
                  - name: envoy.filters.http.ext_authz
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                      http_service:
                        path_prefix: '/api/verify/'
                        server_uri:
                          uri: authelia-backend.os-framework:9091
                          cluster: authelia
                          timeout: 2s
                        authorization_request:
                          allowed_headers:
                            patterns:
                              - exact: accept
                              - exact: cookie
                              - exact: proxy-authorization
                              - prefix: x-unauth-
                              - exact: x-authorization
                              - exact: x-bfl-user
                              - exact: x-real-ip
                              - exact: terminus-nonce
                          headers_to_add:
                            - key: X-Forwarded-Method
                              value: '%REQ(:METHOD)%'
                            - key: X-Forwarded-Proto
                              value: '%REQ(:SCHEME)%'
                            - key: X-Forwarded-Host
                              value: '%REQ(:AUTHORITY)%'
                            - key: X-Forwarded-Uri
                              value: '%REQ(:PATH)%'
                            - key: X-Forwarded-For
                              value: '%DOWNSTREAM_REMOTE_ADDRESS_WITHOUT_PORT%'
                        authorization_response:
                          allowed_upstream_headers:
                            patterns:
                              - exact: authorization
                              - exact: proxy-authorization
                              - prefix: remote-
                              - prefix: authelia-
                          allowed_client_headers:
                            patterns:
                              - exact: set-cookie
                          allowed_client_headers_on_success:
                            patterns:
                              - exact: set-cookie
                      failure_mode_allow: false                      
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
      - name: listener_image
        address:
          socket_address:
            address: 127.0.0.1
            port_value: 15080
        filter_chains:
          - filters:
              - name: envoy.filters.network.http_connection_manager
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                  stat_prefix: tapr_http
                  http_protocol_options:
                    accept_http_10: true
                  upgrade_configs:
                  - upgrade_type: websocket                  
                  skip_xff_append: false
                  codec_type: AUTO
                  route_config:
                    name: local_route
                    virtual_hosts:
                      - name: service
                        domains: ["*"]
                        routes:
                          - match:
                              prefix: "/images/upload"
                            route:
                              cluster: images
                  http_filters:
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
      clusters:
      - name: original_dst
        connect_timeout: 120s
        type: ORIGINAL_DST
        lb_policy: CLUSTER_PROVIDED
        common_http_protocol_options:
          idle_timeout: 10s
      - name: authelia
        connect_timeout: 2s
        type: LOGICAL_DNS
        dns_lookup_family: V4_ONLY
        dns_refresh_rate: 600s
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: authelia
          endpoints:
            - lb_endpoints:
                - endpoint:
                    address:
                      socket_address:
                        address: authelia-backend.os-framework
                        port_value: 9091
      - name: images
        connect_timeout: 5s
        type: LOGICAL_DNS
        dns_lookup_family: V4_ONLY
        dns_refresh_rate: 600s
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: images
          endpoints:
            - lb_endpoints:
                - endpoint:
                    address:
                      socket_address:
                        address: tapr-images-svc.user-system-{{ .Values.bfl.username }}
                        port_value: 8080
kind: ConfigMap
metadata:
  name: sidecar-configs
  namespace: {{ .Release.Namespace }}

---

apiVersion: v1
kind: Service
metadata:
  name: wise-svc
  namespace: {{ .Release.Namespace }}
spec:
  type: ClusterIP
  selector:
    app: wise
  ports:
    - name: "frontend"
      protocol: TCP
      port: 80
      targetPort: 80